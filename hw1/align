#!/usr/bin/env python
import optparse, sys
from collections import defaultdict
from pprint import pprint

import random

optparser = optparse.OptionParser()
optparser.add_option("-b", "--bitext", dest="bitext", default="data/dev-test-train.de-en", help="Parallel corpus (default data/dev-test-train.de-en)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
optparser.add_option("-i", "--EM_iterations", dest="EM_iter", default=1, type="int", help="Number of iterations of EM to use")

(opts, _) = optparser.parse_args()


bitext = [[sentence.strip().split() for sentence in pair.split(' ||| ')] for pair in open(opts.bitext)][:opts.num_sents]
alignment_table = {}
alignments = []

# uniform initialization
for (f, e) in bitext:
  m = len(e)
  n = len(f)
  
  for e_word in e:
    alignment_table[e_word] = alignment_table.get(e_word, defaultdict(int))

  #sent_alignments = []
  for i in xrange(m):
    a_i = random.randint(0,n-1)
    #sent_alignments.append((a_i,i))

    f_word = f[a_i]
    e_word = e[i]
    alignment_table[e_word][f_word] += 1

  #print " ".join([str(i)+"-"+str(j) for i,j in sent_alignments])

for EM in xrange(opts.EM_iter):
  alignment_table_NEW = {}
  for (f, e) in bitext:
    m = len(e)
    n = len(f)

    for e_word in e:
      alignment_table_NEW[e_word] = alignment_table_NEW.get(e_word, defaultdict(int))

    if EM == opts.EM_iter-1:
      sent_alignments = []

    for i in xrange(m):
      e_word = e[i]

      subtable = [0] * len(f) # Add-1 smoothing
      for index,f_word in enumerate(f):
        subtable[index] += alignment_table[e_word][f_word]

      SUM = sum(subtable)
      selection = random.randint(0,SUM-1)

      a_i = None
      for index, num in enumerate(subtable):
        selection -= num
        if selection < 0:
          a_i = index
          break

      if a_i == None:
        sys.stderr.write("ERROR. a_i was not assigned an index (line 81)")
        exit()

      f_word = f[a_i]
      alignment_table_NEW[e_word][f_word] += 1
      if EM == opts.EM_iter-1:
        sent_alignments.append((a_i, i))

    if EM == opts.EM_iter-1:
      print " ".join([str(i)+"-"+str(j) for i,j in sent_alignments]) 
  alignment_table = alignment_table_NEW

  

