#!/usr/bin/env python
import optparse, sys
from collections import defaultdict
from pprint import pprint

import random

optparser = optparse.OptionParser()
optparser.add_option("-b", "--bitext", dest="bitext", default="data/dev-test-train.de-en", help="Parallel corpus (default data/dev-test-train.de-en)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()


bitext = [[sentence.strip().split() for sentence in pair.split(' ||| ')] for pair in open(opts.bitext)][:opts.num_sents]
alignment_table = {}
alignments = []

# uniform initialization
for (f, e) in bitext:
  m = len(e)

  """
  sys.stderr.write(str(len(f)) + " " + str(f) + "\n")  
  sys.stderr.write(str(len(e)) + " " + str(e) + "\n")
  sys.stderr.write("\n")

  sys.stderr.write("French - English\n")
  sys.stderr.write("Source - Target\n")
  """
  n = len(f)

  sent_alignments = []
  for i in xrange(m):
    a_i = random.randint(0,n-1)
    sent_alignments.append((a_i,i))

    f_word = f[a_i]
    e_word = e[i]

    """
    sys.stderr.write(str(i) + "-" + str(j)+ "\t")
    sys.stderr.write(f[i] + "-" + e[j] + "\n")
    """

    alignment_table[e_word] = alignment_table.get(e_word, {})
    alignment_table[e_word][f_word] = alignment_table[e_word].get(f_word,0) + 1


  #print " ".join([str(i)+"-"+str(j) for i,j in sent_alignments])

#pprint(alignment_table)

for (f, e) in bitext:
  m = len(e)
  n = len(f)
  sent_alignments = []

  for i in xrange(m):
    e_word = e[i]
    #subt_able_e = {}
    SUM = 0

    subtable = [1] * len(f) # Add-1 smoothing
    for index,f_word in enumerate(f):
      if f_word in alignment_table[e_word]:
        subtable[index] += alignment_table[e_word][f_word]

    SUM = sum(subtable)

    selection = random.randint(0,SUM-1)
    #print "SUM", SUM
    #print "selection", selection

    a_i = None
    for index, num in enumerate(subtable):
      #print selection, f_word, subtable_e[f_word]
      selection -= num

      if selection < 0:
        a_i = index
        break

    sent_alignments.append((a_i, i))
  
  print " ".join([str(i)+"-"+str(j) for i,j in sent_alignments]) 
